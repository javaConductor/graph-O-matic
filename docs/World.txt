===============================================================================
===============================================================================
Graph-O-matic-data  (SERVER)

App init
    Init Persistence{
            create collections. Verify required data (debug-only)
    }
    Init World(Persistence){

        Init View Types{
             '/view-types' path should be ready
        }
    }

    Ready!

===============================================================================
===============================================================================
Graph-O-Matic  (CLIENT)

App Init



    WorldController(world).init(){
            load the list of views from world(viewList)
            check the url to see if a view is specified - if so, load it
            if not, check the cookie for which views were last displayed - if found, load them
    }

    WorldController.selectView(viewId):{
        fire selectView event
    }

    WorldController.loadView(viewId):{
        fire openView event
    }

    WorldController.removeView(viewId):{
        fire removeView event
    }

    World.init (Persistence, view-type): {

        /// Add caches to $RootScope or localStorage
            create viewType cache
            create item cache
            create relationshipType cache

    }

    World.onOpenView:{
            get view from persistence
            load view
    }

    World.onCloseView:{
            close view
            fire viewClosed event
            }

    World.onSelectView:{
            select view
            fire viewSelected event
    }

    World.onRemoveView:{
            remove view
            fire viewRemoved event
    }

    view-type.init(): {
            GET /view-types
            add view-type artifacts to the document (via head tag)
    }


Events:
viewRemoved, viewSelected, removeView, viewRemoved, closeView, viewClosed,
 viewOptionsChanged,







The world contains a set of services for accessing the server, common functions, and view management.
 All services are AngularJs based and client side. Services include:
    World   -   create views, manage viewType artifacts,
    View    -   creates viewItems and relationships, manages the movement of viewItems, manages viewTimer event broadcasts.

A viewType is identified by a directory under public/viewTypes.
the dir should contain an artifacts.json file.
{
    "viewTemplate": "view.ejs",
    "scripts": [
        "directives/directives.js",
        "services/services.js",
        "services/services.js",
        "services/services.js",
        "services/services.js",
    ]

}

viewTemplate - the template that will be deployed for a view of this type

World also includes AngularJs directives

===============================================================================
===============================================================================
