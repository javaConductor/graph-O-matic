designations: these are implied attributes
    examples: parent = hasRelationship(item, Child) and IsType(item, Person)
        married = hasRelationship(item, Spouse) and IsType(item, Person)
        twentyYearClub = hasDesignation(married) and (relationship(item, Spouse)).Date.year - Now().year) => 20

optimization:
    read the into list of lists where the first is the one we want and the rest are parents - that way we don't
    have to traverse but once or at intervals.
    line them up like this:
        WMARecording,DigitalRecording,Recording
        DigitalRecording,Recording
        Recording
        RecordLabel,Business
        Business
        Audio, MediaFile
        Image, MediaFile

    Better yet, lets create a map {thing, list(hierarchy of thing - specific to generic)}



======================================================================
use case 1:
======================================================================

check to see if an item has a Sibling relationship to another item.

get all outgoing relationships 
foreach relationship rel
	if rel.is(Si) return true;


-----------------------------------------------
relationship.is(rel){
	return isOneOf(getHierarchy(rel));
}

relationship.isOneOf(relList){
	relList.any(function(rel){
		return this.id = rel.id;
	});

}

======================================================================
use case 2:
======================================================================
validate an item for relationship constraints
Relationship{name:writerOf, constraint:[item.isInTypes([Person,Writer])]
check to see if an item is of type Person.
function foo(relationship
get all items in view 
items.foreach (function(item){
	relationship
})
	if rel.is(Si) return true;


-----------------------------------------------
relationship.is(rel){
	return isOneOf(getHierarchy(rel));
}

relationship.isOneOf(relList){
	relList.any(function(rel){
		return this.id = rel.id;
	});

}


======================================================================
use case 3: Load the view
======================================================================
Get all items in a view and all relationships between these views.


1 - get list of items
	get the static list
	then if view has dynamic criteria then do a full scan of all items against the view criteria

2- find all relationship where the 'from' is in the items AND the 'to' is in the items.

At this point the view is loaded!



======================================================================
use case 4: Determine possible relationships between two items
======================================================================


								
======================================================================
Relationship Details
======================================================================
Type Definition examples:

RelationshipType{category:Literature,
	name:writerOf, 
	constraintFrom:[item.isInTypes([Person,Writer])], 
	constraintTo:[item.isInTypes([LiteraryWork])]
}

produces:

Relationship{
	type:writerOf, from:123, to:456
}

where 'to' is:

Item{type:Person,
	id:123,
	data:{firstname:'',lastname:''}
}

and 'from' is:

Item{type:Book,
	id:456,
	data:{title:'Moby Dick'}
}


RelationshipType{category:Professional,
	name:worksFor, 
	dated:true,//relationships have sets of start and end dates.
	constraintFrom:[item.isInTypes([Person])], 
	constraintTo:[item.isInTypes([Business])]
}

produces:

Relationship{
	type:worksFor, 
	from:123, to:456, 
	duration:{
		currentStart:20130430T120000, 
		previous:[
			[20100330T120000,20110330T120000],
			[20120330T120000,20130330T120000]
		]
	},
	notes: [ {date:"20130330", note: ""}, ... ]
}

where 'from' is:

Item{type:Person,
	id:123,
	data:{firstname:'',lastname:''}
}

where 'to' is:

Item{type:Business,
	id:456,
	data:{name:'IBM'}
}
				
======================================================================
Item Details
======================================================================

ItemType :
{
	name:"Person",
	category: "People",
	requiredData:[
		{name: firstName, type: text},
	],
	optionalData:[
		{name: lastName, type: text},
		{name: birthdate, relationshipType: 'hasBirthdate', itemType:"CalendarDate"},
		{name: deathDate, relationshipType: 'diedOn', itemType:"CalendarDate"},
		{name: family,  relationshipType: 'relatedTo', itemType:"Person"},
		{name: residence, relationshipType: 'resides', itemTypes:["StreetAddress","City","State","Country"]},
	]
}

yields:

Item{
	type:"Person",
	id: "132",
	data:{
		firstName: "Lee",
		birthdate: "777"
	}
}

Relationship{
	type:"hasBirthdate",
	id: "777",
	from:"132",
	to: "456"
}

Item{
	type:"CalendarDate",
	id: "456",
	data:{date: "", bc:true}
}
	



Builtin Relationship Categories
------------------------------------

Builtin Relationship Types
------------------------------------
bornOn
diedOn
Notes
RelatedTo
emailAddress

Builtin Item Categories
------------------------------------
People
Audio

Builtin Item Types
------------------------------------
ItemType Schema

Item default properties:{
    creationTimestamp,
    input source,// view:xyz | import <file> <date> | item Editor

}

Person
{
	"name":"Person",
	"category": "People",
	"requiredData":[
		{"name": "firstName", "type": "text"}
	],
	"optionalData":[
		{"name": "lastName", "type": "text"},
		{"name": "birthdate", "relationshipType": "bornOn", "itemType":"CalendarDate"},
		{"name": "deathDate", "relationshipType": "diedOn", "itemType":"CalendarDate"},
		{"name": "family",  "relationshipType": "relatedTo", "itemType":"Person"},
		{"name": "residence", "relationshipType": "resides", "itemTypes":["StreetAddress","City","State","Country"]},
		{"name": "images",  "relationshipType": "imagesOf", "itemType":"Image" },
		{"name": "sex", "type":"text" },
		{"name": "email", "relationshipType": "emailAddress", "itemType":"EmailAddress" },
		{"name": "comments", "itemType":"Notes" }
	]
},
{
	"name":Notes",
	"category": "Notes",
	"requiredData":[
		{"name": date, "type": "date"},
		{"name": "notes", "type": text}
	]
},
{
	name:"EmailAddress",
	requiredData:[
		{"name": "email", "type": "emailAddress"}
	]
},
{
	parent:"Person",
	name: "Man",
	defaults:[
		{"name": "sex", "value": "male"}
	]
},
{
	parent:"Person",
	name: "Woman",
	defaults:[
		{"name": "sex", "value": "female"}
	]
},
{
	name:"Business",
	category: "Business",
	requiredData:[
		{"name": "name", "type": "text"}
		
	],
	optionalData:[
		{"name": "mainAddress", "relationshipType": "atAddress", "itemType":"StreetAddress"},
		{"name": "branches", "relationshipType": "atAddress", "itemType":"BusinessLocation"},
		{"name": "email", "relationshipType": "emailAddress", "itemType":"EmailAddress" },
		{"name": "postalAddress", "relationshipType": "mailingAddress", "itemType":"StreetAddress" }
	]
},
{
	"name":"StreetAddress",
	"category": "Locations",
	"requiredData":[
		{"name": "address", "type": "text"},
		{"name": "city", "type": "text"},
		{"name": "state", "type": "text"},
	],
	"optionalData":[
		{"name": "address2", "type": "text"},
		{"name": "postalCode", "type": "text"},
		{"name": "country", "type": "text"}
	]
},
{
	"name":"Track",
	"category": "Audio",
	"requiredData":[
		{"name": "title", "type": "text"},
		{"name": "artist", "relationshipType":"performed", itemType: ["Person","Artist"]},
	],
	"optionalData":[
		{"name": "producer", "relationshipType":"produced", itemType: ["Person","Artist","Producer"]},
		{"name": "audioClip", "relationshipType":"audioClip", itemType: "Audio" },
		{"name": "audioFile", "relationshipType":"audioFile", itemType: "Audio" },
		{"name": "credits", "relationshipType": "credits", "itemType":"TrackCredits"}
	]
},
{
	"name":"Artist",
	"category": "Audio",
	"requiredData":[
		{"name": "name", "type": "text"},
		{"name": "photos", "relationshipType":"photoOf", itemType: "Image"},
	],
	"optionalData":[
		{"name": "groupMembers", "relationshipType":"memberOf", itemType: ["Person","GroupMemeber"]}		
	]
},
{
	"name" : "GroupMember" ,
	"parent":"Person",
	"requiredData":[
	],
	"optionalData":[
		{"name": "contribution", "type": "text"}
	]
}
TrackCredits{category:Audio, track, contribution, contribution(Person|Artist|GroupMember)}

{
	"name":"TrackCredits",
	"category": "Audio",
	"requiredData":[
		{"name": "trackId", "type": "id"},
		{"name": "contributors", 
			"type":"map", 
			"map":{
				"key":{
					"type": "text"
				}, 
				"value":{ 
					"relationshipType":"audioClip", // defaults to name 
					itemType: "Audio"
				}
			},
		},
	],
	"optionalData":[
		{"name": "producer", "relationshipType":"produced", itemType: ["Person","Artist","Producer"]},
		{"name": "audioClip", "relationshipType":"audioClip", itemType: "Audio" },
		{"name": "audioFile", "relationshipType":"audioFile", itemType: "Audio" },
		{"name": "credits", "relationshipType": "credits", "itemType":"TrackCredits"}
	]
},

Recording{title, media, format}

VideoRecording{category:Audio, parent:"Recording", producer:(Person|Business), credits(RecordingCredits), 
images[](Image), media, format}

AudioRecording{category:Audio, title, label(RecordLabel), execProducer(Person), credits(TrackCredits), 
images[](Image), media, format}

{
	"name":"AudioRecording",
	"parent": "Audio",
	"category": "Audio",
	"requiredData":[
		{"name": "title", "type": "text"},
		{"name": "label", "relationshipType":"onLabel", itemType: ["RecordLabel"]},
		{"name": "artist", "relationshipType":"performed", itemType: ["Person","Artist"]},
		{"name": "executiveProducer", itemType: ["Person","Artist"]},
		{"name": "credits", "relationshipType":"credits", itemType: ["TrackCredits"]},
		{"name": images", "relationshipType":"performed", itemType: ["Person","Artist"]},
	],
	"optionalData":[
		{"name": "producer", "relationshipType":"produced", itemType: ["Person","Artist","Producer"]},
		{"name": "audioClip", "relationshipType":"audioClip", itemType: "Audio" },
		{"name": "audioFile", "relationshipType":"audioFile", itemType: "Audio" },
		{"name": "credits", "relationshipType": "credits", "itemType":"TrackCredits"}
	]
},
VinylRecording{parent:Recording, media:Vinyl}
DigitalRecording{parent:Recording, media:digital }
CDRecording{parent:DigitalRecording, format:CD}
MP3Recording{parent:DigitalRecording, format:mp3}
WAVRecording{parent:DigitalRecording, format:wav}
MP4aRecording{parent:DigitalRecording, format:mp4a}
WMARecording{parent:DigitalRecording, format:wma}
MediaFile{mimeType, fileURL}
Audio{parent:MediaFile, mimeType:{mp3,wav,mp4a,wma}}
Image{parent:MediaFile, mimeType:{gif,jpg,png,bmp}}
RecordLabel{parent:Business,industry:Music }



=================================================================================
==  World Extensions
==  Extension-Points for Items and Relationships
=================================================================================

Global Relationship Type Extension-points
====================================
extension-point: _$rtype$constraint
signature: function(itemFrom, itemTo)
This function is called check both to and from constraints at run-time.

extension-point: _$rtype$constraintTo
signature: function(itemTo)
This function is called check the 'to' constraint at run-time.

extension-point: _$rtype$constraintFrom
signature: function(itemFrom)
This function is called check the 'from' constraint at run-time.

Dynamics relationships = to recalc all the time - return the proper relationship to reflect the current state of the items.
Example: the relationship between two teams' rank as the season progresses is one that may fluctuate. At times,
one team may be 'GamesAhead(3)' or that team may be 'GamesBehind(5)'
Teams in different leagues may not have a relationship at all.

extension-point: _$rtype$dynamic$<type-name>
signature: function(world, itemFrom, itemTo)
This function will return the real relationship between the to 2 items or null if there is no relationship.

Global Item Type Extension-points
====================================

How to add extension-points:
World.extend({"entrypoint":function})
