<!DOCTYPE html>
<html>
<head>
	<title><%= title %></title>
	<link rel='stylesheet' href='/stylesheets/style.css'/>

	<script src="js/lib/jquery/jquery-1.8.2.js" type='text/javascript'></script>
	<script src="js/lib/jquery/jquery-ui-1.9.1.custom.js" type='text/javascript'></script>
	<script src="js/lib/angular/angular.js" type='text/javascript'></script>
	<script src="js/lib/angular/angular-resource.js" type='text/javascript'></script>

	<script src="js/services/services.js" type='text/javascript'></script>
	<script src="js/services/constants.js" type='text/javascript'></script>
	<script src="js/services/persistence.js" type='text/javascript'></script>
	<script src="js/services/utilSvc.js" type='text/javascript'></script>
	<script src="js/services/model.js" type='text/javascript'></script>
	<script src="js/services/world.js" type='text/javascript'></script>
	<script src="js/services/contextService.js" type='text/javascript'></script>
	<script src="js/services/relationship.js" type='text/javascript'></script>
	<script src="js/services/view.js" type='text/javascript'></script>
	<script src="js/filters.js" type='text/javascript'></script>
	<script src="js/directives/directives.js" type='text/javascript'></script>
	<script src="js/directives/graphItem.js" type='text/javascript'></script>
	<script src="js/directives/graphRelationship.js" type='text/javascript'></script>
	<script src="js/directives/graphView.js" type='text/javascript'></script>
	<script src="js/controllers.js" type='text/javascript'></script>
	<script src="js/relationshipCtrl.js" type='text/javascript'></script>

	<script src="js/app.js" type='text/javascript'></script>

	<style>
		.draggable {
			cursor: move;
			position: absolute;
		}

		.viewItem {
			background: url("/images/gold_textured_background_hd_picture_3_169654.jpg");
			background-size: cover;
			background-clip: padding-box;
			width: 410px;
			left: 150px;
			top: 200px;
		}

		body {
			background-color: goldenrod;
			background-image:  url("/images/backgroundImage.jpg");
			background-size: 100%;

		}

		.detailTable {
			border-style: groove;
			border-bottom-color: goldenrod;
			border-left-color: lightgoldenrodyellow;
			border-top-color: gold;
			border-right-color: goldenrod;
			width: 100%;
			height: 160px;

		}

		.detailHeader {
			text-align: center;
			font-size: 12px;
			font-weight: bold;
		}

		.detailName {
			font-size: 10px;
			text-align: right;
			font-weight: bold;
		}

		.detailValue {
			font-size: 10px;
			text-align: left;
			font-weight: normal;
		}

		.detailBody {
			width: 100%;
			overflow: auto;
		}

		.details {
			float: right;
			position: relative;
			left: 0px;
			top: 20px;
			width: 201px;
			height: 160px;
		}

		.summary {
			float: left;
			position: relative;
			width: 201px;
			height: 201px;
		}
	</style>
</head>
<body ng-app >

Item Position: <label style="color: white" id='position'></label>
<script>
	var dnd = {
		lastX: 0,
		lastY: 0,
		beforeLastX: 0,
		beforeLastY: 0,
		initX: 0,
		initY: 0,
		initTop: 0,
		initLeft: 0,
		dragStart: function (evt) {

			console.log('dragStartEvent ' +
					'client -> x:' + evt.clientX + " y:" + evt.clientY +
					' page   -> x:' + evt.pageX + " y:" + evt.pageY);

			var el = angular.element(evt.currentTarget);
			//store the difference in top/left and where the mouse is
			this.initX = evt.pageX;
			this.initY = evt.pageY;
			var off = el.offset();
			this.initTop = off.top;
			this.initLeft = off.left;
			this.beforeLastX = this.lastX = off.left;
			this.beforeLastY = this.lastY = off.top;
			console.log('dragStartEvent ' +
					'element pos -> x:' + this.initLeft + " y:" + this.initTop);
			return evt;
		},

		drag: function (evt) {
			if (evt.preventDefault)
				evt.preventDefault();
//			console.log('dragEvent ' +
//					' client   -> x:' + evt.clientX + " y:" + evt.clientY +
//					' offset   -> x:' + evt.offsetX + " y:" + evt.offsetY +
//					' screen   -> x:' + evt.screenX + " y:" + evt.screenY +
//					' page   -> x:' + evt.pageX + " y:" + evt.pageY);

			this.beforeLastX = this.lastX ===0 ? evt.pageX : this.lastX;
			this.beforeLastY = this.lastY ===0 ? evt.pageY : this.lastY;

			this.lastX = evt.pageX;
			this.lastY = evt.pageY;
			var ofs = angular.element(evt.currentTarget).offset();

			$('#position').text(ofs.left + ', ' + ofs.top);

			var el = angular.element(evt.currentTarget);
			var x = (this.beforeLastX - this.initX) + this.initLeft;
			var y = (this.beforeLastY - this.initY) + this.initTop;
//			console.log('dragEndEvent ' +
//					' last -> x:' + this.beforeLastX + " y:" + this.beforeLastY +
//					' new pos -> x:' + x + " y:" + y);
			el.offset({"left": x, "top": y});

		},

		dragOver: function (evt) {

			console.log('dragOverEvent ' +
				//'client -> x:'+evt.clientX + " y:"+evt.clientY+
					' offset   -> x:' + evt.offsetX + " y:" + evt.offsetY +
					' page   -> x:' + evt.pageX + " y:" + evt.pageY);
			if (evt.preventDefault)
				evt.preventDefault();
			evt.dataTransfer.dropEffect = 'move';
			var el = angular.element(evt.currentTarget);
			return evt;
		},

		drop: function (evt) {
			if (evt.preventDefault)
				evt.preventDefault();
			console.log('dropEvent ' +
					' client   -> x:' + evt.clientX + " y:" + evt.clientY +
					' offset   -> x:' + evt.offsetX + " y:" + evt.offsetY +
					' screen   -> x:' + evt.screenX + " y:" + evt.screenY +
					' page   -> x:' + evt.pageX + " y:" + evt.pageY);

		},

		dragEnd: function (evt) {
			if (evt.preventDefault)
				evt.preventDefault();
			var el = angular.element(evt.currentTarget);
			var off = el.offset();
			console.log('dragEndEvent ' +
					' client   -> x:' + evt.clientX + " y:" + evt.clientY +
					' offset   -> x:' + evt.offsetX + " y:" + evt.offsetY +
					' moverOffset   -> x:' + off.left + " y:" + off.top +
					' screen   -> x:' + evt.screenX + " y:" + evt.screenY +
					' page   -> x:' + evt.pageX + " y:" + evt.pageY);
			// broadcast the move
			alert("item moved to:  x:" + off.left + " y:" + off.top);
			return evt;
		},
		dropped: function (evt, node) {
			console.log('droppedEvent ' +
					' client   -> x:' + evt.clientX + " y:" + evt.clientY +
					' offset   -> x:' + evt.offsetX + " y:" + evt.offsetY +
					' screen   -> x:' + evt.screenX + " y:" + evt.screenY +
					' page   -> x:' + evt.pageX + " y:" + evt.pageY);
		}

	};
</script>

<div draggable='true' id='theDiv'
	 ondragstart="dnd.dragStart(event)"
	 ondrag="dnd.drag(event)"
	 ondragover="dnd.dragOver(event)"
	 ondrop="dnd.drop(event)"
	 ondragend="dnd.dragEnd(event)"
	 class="draggable viewItem"
	 ng-controller="ViewItemCtrl"
		>
			<div class="summary">
				<svg xmlns="http://www.w3.org/2000/svg" xlink="http://www.w3.org/1999/xlink">
					<g>
						<foreignObject class="node" x="20" y="30" width="100%" height="300">
							<label id='title'>{{viewItem.title()}}</label>
						</foreignObject>
						<image x="20" y="50" width="160" height="80"
							   xlink:href="{{viewItem.image()}}">
						</image>
					</g>
				</svg>
			</div>
			<div class="details">
				<table class="detailTable">
					<thead>
					<tr>
						<th class="detailHeader" colspan="2">Details</th>
					</tr>
					</thead>
				</table>
				<div style="border-style: groove; overflow: auto;height: 140px;" >
					<table class="detailBody" >
						<tbody>
						<tr
							ng-repeat='row in viewItem.data()'>
							<td width='50%' class="detailName">{{row.name}}</td>
							<td class="detailValue">{{row.value}}</td>
						</tr>
						</tbody>
					</table>
				</div>
			</div>
</div>

<script>
	(function () {
		var dragging = false;
		var isOver = false;
		$('#theDiv').offset({'left': 100, 'top': 100 });
		$('body').mousemove(function (evt) {
			var offset = $('#theDiv').offset();
			$('#position').text(offset.left + ', ' + offset.top);
		});



	})();
</script>
</body>
</html>
